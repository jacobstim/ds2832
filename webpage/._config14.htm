<!DOCTYPE HTML>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta charset="utf-8"/>
    <title>Configuration</title>
    <link rel="stylesheet" type="text/css" href="dscript.css">
 </head>


<body onload="startAJAX()">
    <div id="container">
            <p id="ModuleName"> ~Module~ <span style="font-size: 40%">  System Configuration </span> </p>
            <p id="devantech"> Devantech Ltd </p>
          <br>
        <div id="hr"> <hr style="width: 100%; height: 1px; background-color: #FFFFFF; border: none">  </div>
          <div id="menubar">
            <ul>
                <div onmouseover="StatusText(this)" onmouseout="SeqText(this)"> <li><a href="_config.htm">Status</a></li> </div>
                <div onmouseover="NetworkText(this)" onmouseout="SeqText(this)"> <li><a href="_config2.htm">Network</a></li> </div>
                <div onmouseover="TCPIPText(this)" onmouseout="SeqText(this)"> <li><a href="_config3.htm">TCP/IP</a></li> </div>
                <div onmouseover="RelayText(this)" onmouseout="SeqText(this)"> <li><a href="_config5.htm">Relays</a></li> </div>
                <div onmouseover="IOText(this)" onmouseout="SeqText(this)"> <li><a href="_config7.htm">Input/Output</a></li> </div>
                <div onmouseover="dSxText(this)" onmouseout="SeqText(this)"> <li><a href="_config6.htm">dSx Config</a></li> </div>
                <div onmouseover="SequenceText(this)"> <li><a style="background-color: #8090a0;" href="_config14.htm">Sequencer</a></li> </div>
                <div onmouseover="ScheduleText(this)" onmouseout="SeqText(this)"> <li><a href="_config11.htm">Scheduler</a></li> </div>
                <div onmouseover="CounterText(this)" onmouseout="SeqText(this)"> <li><a href="_config12.htm">Counter/Timer</a></li> </div>
                <div onmouseover="NotifyText(this)" onmouseout="SeqText(this)"> <li><a href="_config4.htm">Event Notification</a></li> </div>
                <div onmouseover="P2PText(this)" onmouseout="SeqText(this)"> <li><a href="_config10.htm">Peer to Peer</a></li> </div>
                <div onmouseover="EasyMailText(this)" onmouseout="SeqText(this)"> <li><a href="_config9.htm">Email</a></li> </div>
                <div onmouseover="PingText(this)" onmouseout="SeqText(this)"> <li><a href="_config8.htm">Ping</a></li> </div>
                <div onmouseover="AppText(this)" onmouseout="SeqText(this)"> <li><a href="index.htm">Application Page</a></li> </div>
            </ul>
        </div>
        <div id="centerblock">
            <div id="center">
                <div onmouseover="PageNoText(this)" onmouseout="SequenceText(this)">
                    <div class="item-line"> Page. </div>
                    <select id="PageNum" onChange="SelectPage();">
                        <option value="1">1</option>
                    </select>
                </div>  <br>


    <div class="tableHdr"; style="margin-left:2px;">Line</div>
    <div class="tableHdr"; style="margin-left:15px;";>Control</div>
    <div class="tableHdr"; style="margin-left:15px;";>K1</div>
    <div class="tableHdr"; style="margin-left:97px;";>K6 K7</div>
    <div class="tableHdr"; style="margin-left:90px;";>K12</div>


<script>
    displayStyle = "block";
    totalRowNumber = 1;
    for(pageNumber=1; pageNumber<11; pageNumber++) {
        document.write("<div onmouseover='SeqText(this)' onmouseout='SequenceText(this)' id='page" + pageNumber +"' style='display:" + displayStyle + "'>");
        document.write("<div class='checkboxes'> <span>");
        for(rowNumber=1; rowNumber<13; rowNumber++) {   
            if(totalRowNumber<97) {
                if(totalRowNumber<10) document.write( "0" + totalRowNumber + " " ); 
                else document.write( totalRowNumber + " " ); 
            }
            else if(totalRowNumber<100) document.write( "0" + totalRowNumber + " " ); 
            else document.write( totalRowNumber + " " ); 
            document.write("<input class='seqInputBox' id=" + totalRowNumber + " type='text' onkeyup='updateKcmds(this)'>"); 
            for(checkBoxNumber=1; checkBoxNumber<13; checkBoxNumber++) {            
                document.write("<input onClick='updateKoutputs(this)' type='checkbox' id='" + ((checkBoxNumber*2) + (totalRowNumber*32)) + "'>");
            }
            ++totalRowNumber;
            document.write("<br>");
        }
        document.write("<br> </span> </div> </div>");         
        displayStyle = "none";
    }

    document.write("<div onmouseover='DebugText(this)' onmouseout='SequenceText(this)'>");
        document.write("<div class='checkboxes'> <span> ");
        document.write("<div style='display:inline' id='DBline'>95 </div> ");
        document.write("<input class='seqInputBox' id='DBcmd' type='text'>");
        for(checkBoxNumber=1; checkBoxNumber<13; checkBoxNumber++) {    
            document.write("<input type='checkbox' id='DB" + checkBoxNumber + "' enabled='false'>");
        }
        document.write("</span> </div>");         
        document.write("<p id='RemainingTime'>Loading, Please Wait.. .  .</p>");
    document.write("</div>"); 
    

</script>


            </div>
        </div>

        <div id="helpblock">
            <div ID="help">
            </div>
            <div>
                <div class='Indicator1'>  <img class='IO' id='Pend' src='DarkOff.png'/> Update Pending </div>

            </div>
        </div>
    </div>

<script>
SeqText();

var sel = document.getElementById('PageNum');
for(var i = 2; i < 11; i++) {
    var opt = document.createElement('option');
    opt.innerHTML = i;
    opt.value = i;
    sel.appendChild(opt);
}


function updateKoutputs(cb)
{
    x = cb.id;
    if(cb.checked==true) x = +x+1;
    newAJAXCommand('dscript.cgi?seqUpdateOutput=' + x);
}

function isDigit(c) {
     return ((c >= '0') && (c <= '9')); 
}


function updateKcmds(cb)
{
var ctrl=0, v1=0, v2=0;

    array = cb.value.split(',');
    if(array[0]==="") {
        newAJAXCommand('dscript.cgi?seqUpdateCmd=' + Number((1<<29) + (cb.id)-1)); // blank row
        return;
    }
 
    cmd = array[0].trim();
    if(isDigit(cmd.charAt(0))) {
        ctrl = 1<<19;                       // seconds command
        x = Number(cmd);
        if(x>4093) x=4093;                  // limit to 12 bit field
        ctrl += (x<<7);                     // the number of seconds
    }
    else {
        val = cmd.slice(1);
        switch(cmd.charAt(0)) {
            case 'm':
                v2 = Number(val);           // delay in mS
                ctrl = 2<<19;               // mS delay command
                break;
            case 'M':
                v2 = Number(val);           // delay in Minutes
                ctrl = 3<<19;               // Minutes delay command
                break;
            case 'H':
            case 'h':
                v2 = Number(val);           // delay in Hours
                if(v2>596) v2 = 596;
                ctrl = 4<<19;               // Hours delay command
                break;
            case 'J':
            case 'j':
                v2 = Number(val)-1;         // line
                ctrl = 5<<19;               // Jump command
                break;
            case 'C':
            case 'c':
                v2 = Number(val)-1;         // line
                ctrl = 6<<19;               // Call command
                break;
            case 'U':
            case 'u':
                v2 = Number(val);           // max delay in Secs
                ctrl = 7<<19;               // Unknown (Random delay) command
                break;
            case 'X':
            case 'x':
                ctrl = 8<<19;               // eXit (Return) command
                break;
            case 'T':
            case 't':
                val = val.split(':');
                v1 = Number(val[0]);        // Hours
                v2 = Number(val[1]);        // Minutes
                ctrl = 9<<19;               // time command
                break;
            case 'R':
            case 'r':
                if(array[1]==="") return;
                v1 = Number(val);           // Relay number
                v1 -= 1;                    // make it 0-31 to fit field
                v2 = Number(array[1])-1;    // line
                ctrl = 10<<19;              // Relay command
                break;
            case 'D':
            case 'd':
                if(array[1]==="") return;
                v1 = Number(val);           // Input number
                v2 = Number(array[1])-1;    // line
                ctrl = 11<<19;              // Digital Input command
                break;
            case 'S':
            case 's':
                if(array[1]==="") return;
                v1 = Number(val);           // Input number
                v2 = Number(array[1])-1;    // line
                ctrl = 12<<19;              // Schedule Input command
                break;
            case 'K':
            case 'k':
                if(array[1]==="") return;
                v1 = Number(val);           // Input number
                v2 = Number(array[1])-1;    // line
                ctrl = 13<<19;              // Sequencer K Input command
                break;
        }

        if(v1>31) v1 = 31;          // limit to 5 bit field
        if(v1<0) v1 = 0;
        if(v2>4093) v2=4093;        // limit to 12 bit field
        if(v2<0) v2 = 0;
        ctrl += v1<<14;
        ctrl += v2<<7; 
    }
    
    ctrl += Number(cb.id)-1;  // current row
    newAJAXCommand('dscript.cgi?seqUpdateCmd=' + ctrl);
}

function genCmdText(idx)
{
var cmdString="";

    cmd = (seq[idx]) >> 24;
    switch(cmd) {
        case 1:
            cmdString = ((seq[idx] >> 12) & 0x0FFF);
            break;
        case 2:
            cmdString = "m" + ((seq[idx] >> 12) & 0x0FFF);
            break;
        case 3:
            cmdString = "M" + ((seq[idx] >> 12) & 0x0FFF);
            break;
        case 4:
            cmdString = "H" + ((seq[idx] >> 12) & 0x0FFF);
            break;
        case 5:
            cmdString = "J" + (((seq[idx] >> 12) + 1) & 0x0FFF);
            break;
        case 6:
            cmdString = "C" + (((seq[idx] >> 12) + 1) & 0x0FFF);
            break;
        case 7:
            cmdString = "U" + ((seq[idx] >> 12) & 0x0FFF);
            break;
        case 8:
            cmdString = "X";
            break;
        case 9:
            cmdString = "T" + ((seq[idx] >> 19) & 0x1F) + ":" + ((seq[idx] >> 12) & 0x7F);
            break;
        case 10:
            cmdString = "R" + ((seq[idx] >> 19)+1 & 0x1F) + ", " + (((seq[idx] >> 12) + 1) & 0x7F); // +1 for Rnum is correct
            break;
        case 11:
            cmdString = "D" + ((seq[idx] >> 19) & 0x1F) + ", " + (((seq[idx] >> 12) + 1) & 0x7F);
            break;
        case 12:
            cmdString = "S" + ((seq[idx] >> 19) & 0x1F) + ", " + (((seq[idx] >> 12) + 1) & 0x7F);
            break;
        case 13:
            cmdString = "K" + ((seq[idx] >> 19) & 0x1F) + ", " + (((seq[idx] >> 12) + 1) & 0x7F);
            break;
    }
    return cmdString;
}


var seqRaw;
var seqOK = 0;

//  seq[row] bit format is:
//  A. 31:29 reserved, 28:24 cmd, 23:19 Object num, 18:12 target row, 11:0 K outputs
//  B. 31:29 reserved, 28:24 cmd, 23:12 Delay time, 11:0 K outputs

function SelectPage()
{
    selection = document.getElementById('PageNum');
    k = selection.options[selection.selectedIndex].value;
    for(x=1; x<11; x++) {
        if(k==x) {
            document.getElementById('page'+x).style.display = 'block';
        }
        else {
            document.getElementById("page"+x).style.display = "none";
        }
    }

    seq = seqRaw.split(',');
    selection = document.getElementById('PageNum');
    idx = (selection.options[selection.selectedIndex].value-1)*12;
    for(y=0; y<12; y++) {
        k = (seq[idx+y]) & 0xfff;
        mask = 1;
        for(x=0; x<12; x++) {
            id = ((x+1)*2) + ((idx+y+1)*32);
            if(mask&k) checked = true; else checked = false;
            document.getElementById(id).checked = checked;
            mask <<= 1;
        }
        document.getElementById(idx+y+1).value = genCmdText(idx+y);
    } // y for loop
}


function dSxText(x) {
    document.getElementById('help').innerHTML = "<br>dSx Extension Modules.<br><br>Configure dSx I/O extension modules that are connected down stream on the RS485 port.";
}

function PageNoText(x) {
    document.getElementById('help').innerHTML = "<br>Page Number<br><br>Selects one of 10 pages, for a total of 120 steps.<br><br>";
}

function PingText(x) {
    document.getElementById('help').innerHTML = "<br>Ping<br><br>Ping to up to two remote hosts.<br><br> Used to to test if a remote system is alive and well.<br><br>";
}

function TCPIPText(x) {
    document.getElementById('help').innerHTML = "<br>TCP/IP<br><br>Configure the TCP/IP port and command set.";
}

function NetworkText(x) {
    document.getElementById('help').innerHTML = "<br>Network<br><br>Configure network IP address and associated parameters.";
}

function PhoneText(x) {
    document.getElementById('help').innerHTML = "<br>Phone App<br><br> Enables the smartphone app. <br> Set the Password to match the Password on the phone APP";
}

function CounterText(x) {
    document.getElementById('help').innerHTML = "<br>Counter/Timers<br><br>Eight Counter/Timers.<br> Used as Counters when the count input is connected to an Input <br><br>Used as Timers when connected to the internal 1Hz clock, T1.<br><br>The 32-bit counter counts up from zero to a maximum of 2,147,483,647.";
}

function ScheduleText(x) {
    document.getElementById('help').innerHTML = "<br>Scheduler<br><br>Schedule daily events with 8 schedules, 2 events per schedule and a week day mask.";
}

function P2PText(x) {
    document.getElementById('help').innerHTML = "<br>Peer to Peer<br><br>Use inputs on this module to control relays on other dSxxxx modules which can be on your local LAN or across the internet.<br>";
}

function AESText(x) {
    document.getElementById('help').innerHTML = "<br>Enable AES Encryption<br><br>This uses the same commands as the binary command set, but uses AES256 encryption for the commands and the response.";
}

function RepeatText(x) {
    document.getElementById('help').innerHTML = "<br>Repeat Time<br><br>This is the time in seconds to repeat the ping. <br>Set to zero to disable pinging.<br><br>";
}

function RelayText(x) {
    document.getElementById('help').innerHTML = "<br>Relay Names<br><br>These are the labels on the relay buttons on the aplication page to give each relay a unique and descriptive name. <br><br>Maximum 20 characters.";
}

function IOText(x) {
    document.getElementById('help').innerHTML = "<br>I/O Names<br><br>These are the I/O labels on the aplication page to give each I/O a unique and descriptive name. <br><br>Maximum 20 characters.";
}

function EasyMailText(x) {
    document.getElementById('help').innerHTML = "<br>Easy Mail<br><br>Send secure emails in response to selected events.";
}

function DelayText(x) {
    document.getElementById('help').innerHTML = "<br>Delay<br><br>This is the time in seconds before starting the pings after a power-up, or restarting the pinging after a failure is triggered. It is to give any devce that is restarted time to reboot and come back online.<br><br>For example:<br>Setting this to 600 will give the remote device 10 minutes to reboot.";
}

function AttemptsText(x) {
    document.getElementById('help').innerHTML = "<br>Retry Attempts<br><br>This is the number of consecutive missed responses before a Ping failure is triggered.<br><br>If set to 1, it will trigger on all missed ping responses.<br><br>If set to 5 it will trigger when 5 consecutive missed responses are encountered. If it gets a response (for example, on the 3rd try) the counter is reset to 5.<br>";
}

function TimeText(x) {
    document.getElementById('help').innerHTML = "<br>Ping Time<br><br>This is the time in uS from the Ping to the echo being received.<br><br>If no echoes are received after the requested number of attempts, this will be set to zero.<br>Use P1 (or P2) in boolean expressions to control relays.<br><br>For example, in Relay 1 Pulse/Follow box enter:<br>(P1<1)<br>This will turn on Relay 1 when Ping1 fails.";
}

function RemoteText(x) {
    document.getElementById('help').innerHTML = "<br>The remote host to ping.<br><br>This may be an IP address such as:<br>192.168.1.123<br><br>Or a domain name such as:<br>example.com";
}

function StatusText(x) {
    document.getElementById('help').innerHTML = "<br>Status<br><br>Shows the current status of the module.";
}

function AppText(x) {
    document.getElementById('help').innerHTML = "<br>Application<br><br>Jumps to the application webpage.";
}

function SeqText(x) {
    document.getElementById('help').innerHTML = "<br>12 output, 120 step Sequencer. <br><br>Delay commands change the K outputs at the START of the delay time.<br><br>1234&emsp;Delay in seconds<br>m50&emsp;Delay in mS<br>M12&emsp;Delay in minutes<br>H20&emsp;Delay in hours<br>U99&emsp;Rand delay (max.seconds)<br>T1:12&emsp;Delay to Time<br><br>K outputs ignored for jump cmds<br><br>J20&emsp; Jump to line<br>C24&emsp;Call line<br>X&emsp;&emsp;Return from last call<br>R1,9&emsp;If Rly active, jump to line<br>D2,9&emsp;If Dig input, jump to line<br>S1,9&emsp;If schedule, jump to line";
}

function DebugText(x) {
    document.getElementById('help').innerHTML = "<br>Debug Area. <br><br>Shows the current line number and the instruction being executed, followed by the current state of the K outputs.<br><br>Below this is the remaining time in seconds for the delay commands, or the current time HH:MM:SS for all other commands.<br><br>To stop execution while editing, clear the command in line 1 (blank).<br><br>Max delay:<br>4093 mS or Seconds or Minutes.<br>596 Hours.";
}

function SequenceText(x) {
    document.getElementById('help').innerHTML = "<br>Sequencer<br><br>A 120 step, 12 output sequencer<br><br>Delay in mS, Seconds, Minutes, Hours or Random Seconds.<br><br>Wait for specified time.<br><br>Jump, Call & Return.<br><br>Branch on Relay, Digital Input or Schedule active.";
}


function handlePhone(cb) {
    if(cb.checked) {
        newAJAXCommand('dscript.cgi?System_Cmd=5');
        newAJAXCommand('dscript.cgi?SystemCmdUpdated=1');
        document.getElementById('SystemTcpPort').disabled = false;
        document.getElementById('ModBusChkBox').checked = false;
        document.getElementById('AsciiChkBox').checked = false;
        document.getElementById('BinaryChkBox').checked = false;
        document.getElementById('AESChkBox').checked = false;
        document.getElementById('SystemPINnumber').disabled = false;
        document.getElementById('SystemAESkey').disabled = true;
    }
    else {
        newAJAXCommand('dscript.cgi?System_Cmd=0');
        newAJAXCommand('dscript.cgi?SystemCmdUpdated=1');
        document.getElementById('SystemAESkey').disabled = true;
        if(document.getElementById('AsciiChkBox').checked == false && document.getElementById('ModBusChkBox').checked == false && document.getElementById('BinaryChkBox').checked == false) document.getElementById('SystemTcpPort').disabled = true;
    }
}

function handleAES(cb) {
    if(cb.checked) {
        newAJAXCommand('dscript.cgi?System_Cmd=4');
        newAJAXCommand('dscript.cgi?SystemCmdUpdated=1');
        document.getElementById('SystemTcpPort').disabled = false;
        document.getElementById('ModBusChkBox').checked = false;
        document.getElementById('AsciiChkBox').checked = false;
        document.getElementById('BinaryChkBox').checked = false;
        document.getElementById('PhoneChkBox').checked = false;
        document.getElementById('SystemAESkey').disabled = false;
        document.getElementById('SystemPINnumber').disabled = true;
        document.getElementById('SystemPINnumber').disabled = true;
    }
    else {
        newAJAXCommand('dscript.cgi?System_Cmd=0');
        newAJAXCommand('dscript.cgi?SystemCmdUpdated=1');
        document.getElementById('SystemAESkey').disabled = true;
        if(document.getElementById('AsciiChkBox').checked == false && document.getElementById('ModBusChkBox').checked == false && document.getElementById('BinaryChkBox').checked == false) document.getElementById('SystemTcpPort').disabled = true;
    }
}

function handleBinary(cb) {
    if(cb.checked) {
        newAJAXCommand('dscript.cgi?System_Cmd=3');
        newAJAXCommand('dscript.cgi?SystemCmdUpdated=1');
        document.getElementById('SystemTcpPort').disabled = false;
        document.getElementById('ModBusChkBox').checked = false;
        document.getElementById('AsciiChkBox').checked = false;
        document.getElementById('AESChkBox').checked = false;
        document.getElementById('PhoneChkBox').checked = false;
        document.getElementById('SystemAESkey').disabled = true;
        document.getElementById('SystemPINnumber').disabled = true;
        document.getElementById('SystemPINnumber').disabled = true;
    }
    else {
        newAJAXCommand('dscript.cgi?System_Cmd=0');
        newAJAXCommand('dscript.cgi?SystemCmdUpdated=1');
        if(document.getElementById('AsciiChkBox').checked == false && document.getElementById('ModBusChkBox').checked == false && document.getElementById('AESChkBox').checked == false) document.getElementById('SystemTcpPort').disabled = true;
    }
}

function handleASCII(cb) {
    if(cb.checked) {
        newAJAXCommand('dscript.cgi?System_Cmd=2');
        newAJAXCommand('dscript.cgi?SystemCmdUpdated=1');
        document.getElementById('SystemTcpPort').disabled = false;
        document.getElementById('ModBusChkBox').checked = false;
        document.getElementById('BinaryChkBox').checked = false;
        document.getElementById('AESChkBox').checked = false;
        document.getElementById('PhoneChkBox').checked = false;
        document.getElementById('SystemAESkey').disabled = true;
        document.getElementById('SystemPINnumber').disabled = true;
    }
    else {
        newAJAXCommand('dscript.cgi?System_Cmd=0');
        newAJAXCommand('dscript.cgi?SystemCmdUpdated=1');
        if(document.getElementById('ModBusChkBox').checked == false && document.getElementById('BinaryChkBox').checked == false && document.getElementById('AESChkBox').checked == false) document.getElementById('SystemTcpPort').disabled = true;
    }
}

function handleModBus(cb) {
    if(cb.checked) {
        newAJAXCommand('dscript.cgi?System_Cmd=1');
        newAJAXCommand('dscript.cgi?SystemCmdUpdated=1');
        document.getElementById('SystemTcpPort').disabled = false;
        document.getElementById('AsciiChkBox').checked = false;
        document.getElementById('BinaryChkBox').checked = false;
        document.getElementById('AESChkBox').checked = false;
        document.getElementById('PhoneChkBox').checked = false;
        document.getElementById('SystemAESkey').disabled = true;
        document.getElementById('SystemPINnumber').disabled = true;
        document.getElementById('SystemPINnumber').disabled = true;
    }
    else {
        newAJAXCommand('dscript.cgi?System_Cmd=0');
        newAJAXCommand('dscript.cgi?SystemCmdUpdated=1');
        if(document.getElementById('AsciiChkBox').checked == false && document.getElementById('BinaryChkBox').checked == false && document.getElementById('AESChkBox').checked == false) document.getElementById('SystemTcpPort').disabled = true;
    }
}


function ajaxUpdate()
{
    LedStatus = getValue('FlashWritePending');
    if(LedStatus>0) document.getElementById('Pend').src = 'RedOn.png';
    else document.getElementById('Pend').src = 'DarkOff.png';
    seqRaw = getValue('sequencer');
    if(seqOK==0) {
        seqOK = 1;
        SelectPage(); 
    }
    line = getValue('seqrow');
    cmd = (seq[line]) >> 24;
    document.getElementById('DBcmd').value = genCmdText(line);
    ++line;
    if(line<10) document.getElementById('DBline').innerHTML = "0" + line;
    else document.getElementById('DBline').innerHTML = line;

    k = getValue('Koutputs');
    mask = 1;
    for(x=1; x<13; x++) {
        id = "DB" + x;
        if(mask&k) state = true; else state = false;
        document.getElementById(id).checked = state;
        mask <<= 1;
    }
    switch(cmd) {
        case 1: case 2: case 3: case 4: case 7:     // Seconds, mS, Minutes, Hours, Unknown (random) delay commands
            x = Math.trunc(getValue('seq1Timer')/1000);
            document.getElementById('RemainingTime').innerHTML = x;
            break;
        default:                                    // the branching commands J, C, X, R, D, S, K
            Hours = getValue('Hours');
            Minutes = getValue('Minutes');
            Seconds = getValue('Seconds');
            if(Minutes.length==1) Minutes = "0"+Minutes;
            if(Seconds.length==1) Seconds = "0"+Seconds;
            document.getElementById('RemainingTime').innerHTML = Hours + ":" + Minutes + ":" + Seconds;
            break;
    }
}

</script>

</body>
</html>

